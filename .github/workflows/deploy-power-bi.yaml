name: Deploy to Power BI

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., NZX)'
        required: true
        type: string
      version:
        description: 'Release version to deploy (e.g., v1.0.0)'
        required: true
        type: string
  release:
    types: [published]

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set client and version
        id: set_variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CLIENT=${{ github.event.inputs.client }}" >> $GITHUB_ENV
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            # Default client for release trigger or use from repository variable
            echo "CLIENT=${{ vars.DEFAULT_CLIENT }}" >> $GITHUB_ENV
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          
          # Convert client name to uppercase for consistency in secret names
          echo "CLIENT_UPPER=$(echo ${{ github.event.inputs.client || vars.DEFAULT_CLIENT }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
        shell: bash

      - name: Set dynamic secret references
        id: set_secrets
        run: |
          # Dynamically access secrets based on client name
          CLIENT_SECRET_PREFIX="${{ env.CLIENT_UPPER }}"
          
          # Extract secrets (Note: This assigns the secret values to environment variables)
          echo "AZURE_CLIENT_ID<<EOF" >> $GITHUB_ENV
          echo "${{ secrets[format('{0}_AZURE_CLIENT_ID', env.CLIENT_UPPER)] }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "AZURE_PASSWORD<<EOF" >> $GITHUB_ENV
          echo "${{ secrets[format('{0}_AZURE_PASSWORD', env.CLIENT_UPPER)] }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "AZURE_TENANT_ID<<EOF" >> $GITHUB_ENV
          echo "${{ secrets[format('{0}_AZURE_TENANT_ID', env.CLIENT_UPPER)] }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "POWERBI_WORKSPACE<<EOF" >> $GITHUB_ENV
          echo "${{ secrets[format('{0}_POWERBI_WORKSPACE', env.CLIENT_UPPER)] }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Download release artifact
        uses: robinraju/release-downloader@v1.8
        with:
          repository: ${{ github.repository }}
          tag: ${{ env.VERSION }}
          fileName: "*.zip"
          out-file-path: "./artifact"

      - name: Unzip artifact
        run: |
          Get-ChildItem -Path ./artifact -Filter *.zip | ForEach-Object {
            Expand-Archive -Path $_.FullName -DestinationPath ./extracted -Force
          }
        shell: pwsh

      - name: Setup PowerShell modules
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path ".\modules" -ErrorAction SilentlyContinue | Out-Null
          
          @("https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1"
          , "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1") |% {
              Invoke-WebRequest -Uri $_ -OutFile ".\modules\$(Split-Path $_ -Leaf)"
          }
          
          if(-not (Get-Module Az.Accounts -ListAvailable)) { 
              Install-Module Az.Accounts -Scope CurrentUser -Force
          }
          
          Import-Module ".\modules\FabricPS-PBIP" -Force

      - name: Login to Azure
        shell: pwsh
        run: |
          $securePassword = ConvertTo-SecureString "${{ env.AZURE_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential("${{ env.AZURE_CLIENT_ID }}", $securePassword)
          Connect-AzAccount -Credential $credential -Tenant "${{ env.AZURE_TENANT_ID }}" -ServicePrincipal

      - name: Deploy to Power BI
        shell: pwsh
        run: |
          Write-Output "Deploying to workspace: ${{ env.POWERBI_WORKSPACE }} for client: ${{ env.CLIENT }}"
          $workspace = Get-FabricWorkspace -workspaceName "${{ env.POWERBI_WORKSPACE }}"
          
          $semanticModelPath = Get-ChildItem -Path "./extracted" -Filter "*.SemanticModel" | Select-Object -First 1 -ExpandProperty FullName
          $reportPath = Get-ChildItem -Path "./extracted" -Filter "*.Report" | Select-Object -First 1 -ExpandProperty FullName
          
          $semanticModelImport = Import-FabricItem -workspaceId $workspace.id -path $semanticModelPath
          
          $semanticReportImport = Import-FabricItem -workspaceId $workspace.id -path $reportPath -itemProperties @{"semanticModelId" = $semanticModelImport.Id}
          
          Write-Output "Deployment completed successfully for client: ${{ env.CLIENT }}!"